# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XYlZfuisho_ZDYC46N1JPnjcKIKBbo0h

GRADIO SYNTAX
"""



import gradio as gr

def greet(name):
    return "Hello, " + name + "!"

demo = gr.Interface(fn=greet, inputs="text", outputs="text")

# To create a shareable link (valid for 72 hours)
demo.launch(share=True)

"""HUGGING FACE TOKEN LOGISTICS"""

!pip install huggingface_hub

from huggingface_hub import whoami
from google.colab import userdata

# Get your Hugging Face token from Colab Secrets
hf_token = userdata.get('HF_TOKEN')

# Verify the token by checking your identity
try:
    user_info = whoami(token=hf_token)
    print(f"Logged in as: {user_info['name']}")
except Exception as e:
    print(f"Could not log in: {e}")
    print("Please make sure you have added your Hugging Face token to Colab Secrets with the name 'HF_TOKEN'")

"""IF YOU WISH TO LOAD SOME DATASET TO TEST ANYTHING"""

from datasets import load_dataset

# Load a dataset (e.g., the SQuAD dataset for question answering)
dataset = load_dataset("squad")

# Print information about the dataset
print(dataset)

# Access an example from the training set
print("\nExample from the training set:")
print(dataset["train"][0])

"""SAMPLE SUMMARISATION CODE"""

from transformers import pipeline

# Load the summarization pipeline
summarizer = pipeline("summarization")

# Text to summarize
text = """
Hugging Face is a company and open-source platform that provides tools and models for natural language processing (NLP). It has become a central hub for the ML community, offering a wide range of pre-trained models that can be easily used or fine-tuned for specific applications. Key aspects of Hugging Face include the Transformers library, Model Hub, Datasets library, and Tokenizers library. Hugging Face democratizes access to powerful ML models, making it easier for developers and researchers to build and deploy applications.
"""

# Summarize the text
summary = summarizer(text, max_length=50, min_length=25, do_sample=False)

print("Original Text:")
print(text)
print("\nSummary:")
print(summary[0]['summary_text'])

"""ASSIGNMENT GOES BELOW -"""

# text_summarizer_app.py

import gradio as gr
from transformers import pipeline

summarizer = pipeline("summarization", model="facebook/bart-large-cnn", token="",device=0)

def summarize_text(text):
    summary = summarizer(text, max_length=150, min_length=30, do_sample=False)[0]["summary_text"]

    output_file = "summary_output.txt"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(summary)
    return summary, output_file

# 4️⃣ Create Gradio Interface
with gr.Blocks(title="Text Summarizer") as demo:

    with gr.Row():
        text_input = gr.Textbox(
            label="Enter your text here"
        )

    summarize_btn = gr.Button("Summarize")
    output_text = gr.Textbox(label="Summary Output")
    export_file = gr.File(label="Download Summary")

    summarize_btn.click(summarize_text, inputs=text_input, outputs=[output_text, export_file])

    # Add light/dark theme toggle
    theme_toggle = gr.Radio(
        ["Light", "Dark"],
        label="Select Theme",
        value="Light"
    )

# 5️⃣ Launch app
if __name__ == "__main__":
    demo.launch()